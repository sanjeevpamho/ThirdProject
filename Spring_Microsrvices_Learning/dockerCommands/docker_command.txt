
Docker: A platform for building ,running and shipping applications.
        
Container: An isolated environment for running an application	

Containers are handled by Containerization engine.
Docker is one of the containerization platforms which can be used to create and run containers.

Definition from docker.com:
A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.

Container images become containers at runtime and in the case of Docker containers – images become containers when they run on Docker Engine.

Docker containers that run on Docker Engine:

>Standard: Docker created the industry standard for containers, so they could be portable anywhere
>Lightweight: Containers share the machine’s OS system kernel and therefore do not require an OS per application, driving higher server efficiencies and reducing server and licensing costs
>Secure: Applications are safer in containers and Docker provides the strongest default isolation capabilities in the industry
	
Virtual Machine:An abstraction of machine(physical hardware)


Helm is a kubernetes package manager for kubernates. It helps in install,upgrade,rollback,uninstall the application.
 helm install application
 helm upgrade application
 helm rollback application
 helm iunnstall application
======================================================================================================
docker image is a blueprint and container is running instance 
sanjeevpamho
Sanjeev@123
--------------------------------------------------------------------
Docker makes deploying applications cakewalk.
1.>docker --version
2.>docker login  , docker logout
If you are using Window 10 and are using docker toolbox
=> Use 192.168.99.100 instead of localhost.
Note: If 192.168.99.100 does not work, you can find the IP by using the command docker-machine ip

->https://hub.docker.com  is docker registry.A registry contains lot of repositories like in28min. 
When we work in enterprize.we will work in private repos. so that can't be accessed outside.
->in28min/todo-rest-api-h2 is repository containing all the versions of project

all the versions are called tags. like (1.0.0.RELEASE). These are called images which contains everything to run it. like library,right software like java.contains any other dependency which might need .
Once it get downloaded and run then it is called container.Image is a static template -a set of bytes. 
Running version of image is known as container.
Image is a static version , container is a running version.


3.>https://hub.docker.com/r/in28min/todo-rest-api-h2
4.>docker run in28min/todo-rest-api-h2:1.0.0.RELEASE
5.>http://localhost:5000/hello-world
   http://localhost:5000/hello-world-bean
6.>docker run -p 5000:5000 in28min/todo-rest-api-h2:1.0.0.RELEASE (run will download image if not downloaded already and will run image)

By default any container we run is part of bridge network in docker. We can understand it like internal docker network.
No can access it. untill we specifically we mention it.

(-p {host port}:{container port})
publish container port to host port.

by mentioning [-p {host port}:{container port}], we are informing docker that , we want to take internal/container port 5000 and map it to host port.
map container port to host port
7.>docker run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE (-d means detached mode. here container will run in background)
8.>docker logs 334bc01c78d
9.>To tail logs ::: docker logs -f 334bc01c78d
10.>http://localhost:5000/jpa/users/in28minutes/todo
11.>to check containers running:    docker container ls (it will show running container)
PS C:\Users\sanjeek9> docker container ls
CONTAINER ID   IMAGE                                    COMMAND                  CREATED       STATUS      PORTS                    NAMES
65bbf9f3ef1d   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   5 weeks ago   Up 7 days   0.0.0.0:5000->5000/tcp   peaceful_sutherland

12.>docker container ls -a (it will show all container irrespective of state)
12.>to launch another container	: docker run -p 5001:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
13.>docker images (images pulled from docker repository in our system)
14.>to stop container : docker container stop id
15.>docker tag in28min/todo-rest-api-h2:1.0.0.RELEASE in28min/todo-rest-api-h2:latest  (create image with different tag)
16.> docker pull mysql (to pull image. If we don't specify tag, it will pull the latest one.latest might not be the most recent and might not be event present sometimes.)
Note: pull command will download image from repository.It will not run. to run image we have to use run command.
17.>docker search mysql (to check image is official or not)
PS C:\Users\sanjeek9> docker search mysql
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
mysql                             MySQL is a widely used, open-source relation…   10545     [OK]
mariadb                           MariaDB is a community-developed fork of MyS…   3937      [OK]
mysql/mysql-server                Optimized MySQL Server Docker images. Create…   773                  [OK]
percona                           Percona Server is a fork of the MySQL relati…   527       [OK]
centos/mysql-57-centos7           MySQL 5.7 SQL database server                   86
mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   79
centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]
bitnami/mysql                     Bitnami MySQL Docker Image                      48                   [OK]
deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]
databack/mysql-backup             Back up mysql databases to... anywhere!         38
prom/mysqld-exporter                                                              37                   [OK]
tutum/mysql                       Base docker image to run a MySQL database se…   35
schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]
linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   27
centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20
circleci/mysql                    MySQL is a widely used, open-source relation…   20
mysql/mysql-router                MySQL Router provides transparent routing be…   18
arey/mysql-client                 Run a MySQL client from a docker container      17                   [OK]
fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   12                   [OK]
openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6
devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3
ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                    [OK]
widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]
jelastic/mysql                    An image of the MySQL database server mainta…   1
monasca/mysql-init                A minimal decoupled init container for mysql    0
18.>We can check history of image as well:
PS C:\Users\sanjeek9> docker images
REPOSITORY                 TAG             IMAGE ID       CREATED         SIZE
mysql                      latest          2933adc350f3   2 weeks ago     546MB
in28min/todo-rest-api-h2   1.0.0.RELEASE   f8049a029560   20 months ago   143MB
in28min/todo-rest-api-h2   latest          f8049a029560   20 months ago   143MB
PS C:\Users\sanjeek9> docker image history f8049a029560
IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
f8049a029560   20 months ago   /bin/sh -c #(nop)  ENTRYPOINT ["sh" "-c" "ja…   0B
<missing>      20 months ago   /bin/sh -c #(nop)  ENV JAVA_OPTS=               0B
<missing>      20 months ago   /bin/sh -c #(nop) ADD file:b5f1bf3b3024aebbe…   38.1MB
<missing>      20 months ago   /bin/sh -c #(nop)  EXPOSE 5000                  0B
<missing>      20 months ago   /bin/sh -c #(nop)  VOLUME [/tmp]                0B
<missing>      21 months ago   /bin/sh -c set -x  && apk add --no-cache   o…   99.3MB
<missing>      21 months ago   /bin/sh -c #(nop)  ENV JAVA_ALPINE_VERSION=8…   0B
<missing>      21 months ago   /bin/sh -c #(nop)  ENV JAVA_VERSION=8u212       0B
<missing>      21 months ago   /bin/sh -c #(nop)  ENV PATH=/usr/local/sbin:…   0B
<missing>      21 months ago   /bin/sh -c #(nop)  ENV JAVA_HOME=/usr/lib/jv…   0B
<missing>      21 months ago   /bin/sh -c {   echo '#!/bin/sh';   echo 'set…   87B
<missing>      21 months ago   /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B
<missing>      21 months ago   /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B
<missing>      21 months ago   /bin/sh -c #(nop) ADD file:a86aea1f3a7d68f6a…   5.53MB

19.>docker image inspect imageid
playing with docker containers:
20.>(pause and unpause container)
PS C:\Users\sanjeek9> docker images
REPOSITORY                 TAG             IMAGE ID       CREATED         SIZE
mysql                      latest          2933adc350f3   2 weeks ago     546MB
in28min/todo-rest-api-h2   1.0.0.RELEASE   f8049a029560   20 months ago   143MB
in28min/todo-rest-api-h2   latest          f8049a029560   20 months ago   143MB
PS C:\Users\sanjeek9> docker container run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
d002aa9dee2e78c605c48989d9b4a16a5d296a42fbba3d6c3d0ba88fbc2d5422
PS C:\Users\sanjeek9> docker container pause d002a
d002a
PS C:\Users\sanjeek9> docker container unpause d002a
d002a
PS C:\Users\sanjeek9>
21.> Prune (it will remove all stopped container)
PS C:\Users\sanjeek9> docker container ls -a
CONTAINER ID   IMAGE                                    COMMAND                  CREATED         STATUS                     PORTS                    NAMES
d002aa9dee2e   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   4 minutes ago   Up 4 minutes               0.0.0.0:5000->5000/tcp   boring_mirzakhani
c03c6d8c33b1   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   8 hours ago     Exited (143) 7 hours ago                            condescending_bartik
334bc01c78de   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   8 hours ago     Created                                             boring_swanson
9dff1203a250   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   8 hours ago     Created                                             gifted_jepsen
d96082e3e336   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   8 hours ago     Exited (143) 7 hours ago                            goofy_swanson
51a385903a9e   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   8 hours ago     Exited (143) 7 hours ago                            condescending_yalow
PS C:\Users\sanjeek9> docker container prune
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Deleted Containers:
c03c6d8c33b1a7c3f57999b74d3e716714be0285e7b1b8fb564923350d513720
334bc01c78de44d1e8da9b827c0581c73bd56257a9d8779811c37b7bfe5685ff
9dff1203a250937f27687be70c472d042a57fd7d81caf4b8c3518ffee6fc5344
d96082e3e336d1b71b5fb77594bf7332141e125e56e7941a984ac16420910875
51a385903a9e790c89315251f0d3a3d675a8e8a5b822aa05cf134d050ced704e

Total reclaimed space: 0B
PS C:\Users\sanjeek9> docker container ls -a
CONTAINER ID   IMAGE                                    COMMAND                  CREATED         STATUS         PORTS                    NAMES
d002aa9dee2e   in28min/todo-rest-api-h2:1.0.0.RELEASE   "sh -c 'java $JAVA_O…"   4 minutes ago   Up 4 minutes   0.0.0.0:5000->5000/tcp   boring_mirzakhani
PS C:\Users\sanjeek9>
22.> docker container stop id  (stop command to stop container).(stop => SIGTERM => graceful shutdown).
It will close all the resources like Shutting down executor services,closing JPA EnityManagerFactory,drop table todo if exists. 
So container given time to stop connection pool .So it was given time to shutdown gracefully.
23.>docker container kill id  (container will get stoped as it is.It was not given time to do anything. kill=>SIGKILL=>immediately terminates the process. 
24.>Important docker container 
docker container run -p 5000:5000 -d --restart=always in28min/todo-rest-api-h2:1.0.0.RELEASE  (restart policy)

if we stop that container and restart docker. So this container will automatically restarted.Docker will check if any container with restart policy.

25.> playing with docker Commands-stats and system

docker events
docker top id
docker stats
docker system df
We can allocate CPU Quota as well to container.

==================================================================
Distributed Tracing:
 >complex call chain
 >how do you debug problems
 >how do you trace requests across microservices
 >Enter distributed tracing

Launching Zipkin container using docker:

docker run -p 9411:9411 openzipkin/zipkin:2.23  

Connecting Currency Exchange Microservice wih Zipkin

so we have to add some 3 dependencies in pom.xml in Connecting Currency Exchange and sampling configuration in application.properties
<dependency>
 <groupId>org.springframework.cloud</groupId>
 <artifactId>spring-cloud-starter-sleuth</artifactId>  --used to assign unique id
</dependency>
<dependency>
 <groupId>org.springframework.cloud</groupId>
 <artifactId>spring-cloud-sleuth-zipkin</artifactId>  --used to assign unique id
</dependency>
<dependency>
 <groupId>org.springframework.amqp</groupId>
 <artifactId>spring-rabbit</artifactId>  --used to assign unique id
</dependency>

Distributed Tracing Server is storing all the request in database.Consider a scenario if database is down then Rabbit MQ is used to store request in queue.
Rabbit MQ we are using so that event if database is down , infromation should be in queue. 

sampling configuration in application.properties : 
spring.sleuth.sampler.probability=1.0   (means trace everything.)

localhost:9411/zipkin/
--------------------------------
Creating container image for currency exchange microservices . It can be done with the help of spring-boot-maven-plugin.We have to add some configuration for that 
          <build>  
			<plugins>
			  <plugin>
				<groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
					<image>
						<name>in28min/mmv2-${project.artifactId}:${project.version}</name>
					</image>
					<pullPolicy>IF_NOT_PRESENT</pullPolicy>
				</configuration>
              </plugin>
			</plugins>
		  </build>	
Steps to create image: go to maven build and == spring-boot:build-image -DskipTests

from command prompt: mvn spring-boot:build-image -DskipTests

===============================================================================
Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%
[INFO]  > Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%
[INFO]  > Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%
[INFO]  > Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%
[INFO]  > Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%
[INFO]  > Pulling builder image 'docker.io/paketobuildpacks/builder:base' 11%

===============================================================================
docker compose: is tool for defining and running multi container applications.
Simply configure YAML file and launch all applications in one shot

docker-compose up

