4.>Can we override the embedded tomcat server in spring boot :
   Yes, we can replace the Embedded Tomcat server with any other servers by using the started dependencies. 
   like - you can use spring-boot-starter-jetty as a dependency for each project as you need.
   
   Note : Tomcat server is embedded because of 'spring-boot-starter-web' dependency
   
   		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
			 <exclusion>
			   <groupId>org.springframework.boot</groupId>
			   <artifactId>spring-boot-starter-tomcat</artifactId>
			 </exclusion>
			</exclusions>	
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>
      
5.>Can we disable the default web server in the spring Boot Application?
   yes.
   the major strong point of spring is to provide the flexibility to build your application loosely 
   coupled.Spring provides feature to disable the web server in quick configuration.
   Yes we can use application.properties file to disable the web server.
   
   spring.main.web-application-type=none
-----------------------------------------------------------------------------------------------------
Steps to deploy the war file in external tomcat :  
   Extend your main class with SpringBootServletInitializer and override its configure method
   
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
   {
    return application.sources(HelloWorldApplication.class,args);
   }
   
   put the war file in tomcat/webapps folderhttps://media.geeksforgeeks.org/wp-content/uploads/20230817150709/Working-of-LRU-Cache-(1).png
   then go to tomcat/bin folder and execute 'catalina.bat run' command to start tomcat server
------------------------------------------------------------------------------------------------------   
6.>How to disable specific auto-configuration class?

@SpringBootApplication
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
public class RestfulWebServicesApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestfulWebServicesApplication.class, args);
	}

}
-------------------------------------------------------------------------------------------------------
7.>@SpringBootApplication -
   @ComponentScan,@Configuration and @EnableAutoConfiguration are clubbed into 1 annotation.
-------------------------------------------------------------------------------------------------------
8.>How to use a property defined in application.properties file 
   into your java class

   @Value("${server.port}")
   private String customVal;
--------------------------------------------------------------------------------------------------------
9.>@RestController
   @Controller + @ResponseBody
------------------------------------------------------------------------------------------------------------------------------------
10.>Difference between @RestController and @Controller
    
	response from a web application is generally consist of (HTML + CSS + Javascript) because they are intended for human viewers 
	while rest api just return data in form of JSON/XML because most of the rest clients are program..
	
11.>Use of Profiles in Spring Boot
    Dev ,QA and Prod
  
    spring.profiles.active=true
 
    application.properties	
    application-dev.properties
	application-prod.properties
-------------------------------------------------------------------------------------------------------------------------------------
12.>how to write  native query in JPA
public interface AddressRepo extends JpaRepository<Address, Integer> { 
  
        @Query( nativeQuery = true,  value 
           = "SELECT ea.id, ea.city, ea.state FROM gfgmicroservicesdemo.address ea join gfgmicroservicesdemo.employee e 
		   on e.id = ea.employee_id 
		   where ea.employee_id=:employeeId"
		   ) 
       
	   Optional<Address> findAddressByEmployeeId(@Param("employeeId") int employeeId); 
}`	`      

---------------------------------------------------------------------------------------------------------------------------------------
13.>  @ManyToMany relationship in jpa
@ManyToMany
@JoinTable(
  name = "course_like", 
  joinColumns = @JoinColumn(name = "student_id"), 
  inverseJoinColumns = @JoinColumn(name = "course_id"))
  Set<Course> likedCourses;

---------------------------------------------------------------------------------------------------------------------------------------
1.>CascadeType.ALL
@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
   
   CascadeType.ALL is a cascading type in Hibernate that specifies that all state transitions (create, update, delete, and refresh) 
   should be cascaded from the parent entity to the child entities.
   
   any change happened on Parent must cascade to child as well.
   
2.>CascadeType.PERSIST
CascadeType.PERSIST is a cascading type in Hibernate that specifies that the create (or persist) operation 
should be cascaded from the parent entity to the child entities.  

@OneToMany(mappedBy = "customer", cascade = CascadeType.PERSIST)

3.>CascadeType.MERGE
CascadeType.MERGE is a cascading type in Hibernate that specifies that the update (or merge) operation 
should be cascaded from the parent entity to the child entities.

4.>CascadeType.REMOVE
CascadeType.REMOVE is a cascading type in Hibernate that specifies that the delete operation 
should be cascaded from the parent entity to the child entities.
-----------------------------------------------------------------------------------------------------------------------------------------
15.>Persistence Context in JPA :

    @PersistenceContext
    private EntityManager entityManager;
--------------------------------------------------------------------------
16.>Custom Repository Implementations

interface CustomizedUserRepository {
  void someCustomMethod(User user);
}

class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  public void someCustomMethod(User user) {
    // Your custom implementation
  }
}

interface UserRepository extends CrudRepository<User, Long>, CustomizedUserRepository {

  // Declare query methods here
}
Extending the fragment interface with your repository interface combines the CRUD and custom functionality and makes it available to clients.	

------------------------------------------------------------------------------------------------------------------------------------------------

Difference between crud repository and jpa repository

https://www.geeksforgeeks.org/spring-boot-difference-between-crudrepository-and-jparepository/

Crud Repository :

public interface CrudRepository<T, ID> extends Repository<T, ID>

Example:
public interface DepartmentRepository extends CrudRepository<Department, Long> {}

It contains methods for CRUD operations. For example save(), saveAll(), findById(), findAll(), etc. 

Jpa Repository

JpaRepository is a JPA (Java Persistence API) specific extension of Repository. 
It contains the full API of CrudRepository and PagingAndSortingRepository. 
So it contains API for basic CRUD operations and also API for pagination and sorting. 

Syntax:

public interface JpaRepository<T,ID> extends PagingAndSortingRepository<T,ID>, QueryByExampleExecutor<T>

It contains the full API of CrudRepository and PagingAndSortingRepository. 
For example, it contains flush(), saveAndFlush(), saveAllAndFlush(), deleteInBatch(), etc along with the methods that are available in CrudRepository.



